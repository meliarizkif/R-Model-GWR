corrplot(cor(Data2019[,-(1:3)]), type = "upper", method = "number")
y=Data2019$PDRB
x1=Data2019$PAD
x2=Data2019$`Belanja Daerah`
x3=Data2019$`Upah Formal`
x4=Data2019$`Upah informal`
x5=Data2019$`Investasi Asing`
x6=Data2019$`Investasi Dalam Negeri`
x7=Data2019$`Tenaga Kerja`
x8=Data2019$Pengangguran
library(PerformanceAnalytics)
data<-Data2019[,c(5,6,7,8,9,10,11,12)]
library(psych)
corPlot(data, cex = 1.2)
mod1<-lm(y~x1+x2+x3+x4+x5+x6+x7+x8,data=Data2019)
summary(mod1)

mod2<-lm(y~x1+x3+x4+x5+x6+x7+x8,data=Data2019)
bptest(mod2)
shapiro.test(mod2$residuals)
lillie.test(mod2$residuals)
summary(mod2)
mod3<-lm(log(y)~x1+x3+x4+x5+x6+x8,data=Data2019)
summary(mod3)
bptest(mod3)
lillie.test(mod3$residuals)
shapiro.test(mod3$residuals)

#Skor AIC
AIC(mod1)
# Uji Multikolinearitas
library(car)
vif(mod1)
vif(mod2)
vif(mod3)
# Uji Keragaman (Heteroskedastisitas)
library(lmtest)
bptest(mod1)
bptest(mod2)
bptest(mod3)
spreadLevelPlot(mod1)
spreadLevelPlot(mod2)
par(mfrow=c(2,2))
plot(mod1)
# uji normalitas
qqnorm(mod1$residuals, ylab="Residuals", xlab="Normal Scores")
qqline(mod1$residuals)
mod.er=residuals(mod1)
mod.er
qqnorm(mod3$residuals, ylab="Residuals", xlab="Normal Scores")
qqline(mod3$residuals)
mean(mod.er^2)
#uji kolmogorovsmirnov
library(nortest)
library(stats)
ks.test(rnorm(118, mean=0),mod1$residuals)
lillie.test(mod1$residuals)
shapiro.test(mod.er)
shapiro.test(mod2$residuals)
lillie.test(mod3$residuals)
ad.test(mod1$residuals)
#Uji Durbin Watson (autocorrelation)
dwtest(Y~X1+X2+X3+X4,data=Data)
dwtest(mod1)
dwtest(mod3)
library(MASS)
step.ols<- stepAIC(mod1, direction = "both", trace = FALSE)
summary(step.ols)
shapiro.test(step.ols$residuals)
sqrt(mean(mod3$residuals^2))

library(spdep)
library(sp)
library(Matrix)
library(maptools)
library(GWmodel)
library(spgwr)
DASp<- readShapePoly("C:/Users/SmartBook/Documents/Mata Kuliah/Skripsi/Peta")
DASd<- readShapeSpatial("C:/Users/SmartBook/Documents/Mata Kuliah/Skripsi/Peta/Jawa_b.shp")
DAS.d.df<- as.data.frame(DASd)
head(DAS.d.df)
summary(DAS.d.df)

################################
### Contiguity neighbour #######
################################
## Queen
class(DASd)
DAS_nb <- poly2nb(DASd,row.names = seq(1,118))
DAS_nb
plot(DASd, col="white", border="grey")
plot(DAS_nb, coordinates(DASd), col="red", add=TRUE)
text(coordinates(DASd), labels=DAS.d.df$KABUPATEN, cex=0.7, col="blue",pos=4, offset=0.4)

## ROOK
DAS_nb2 <- poly2nb(DASd, queen=FALSE, row.names = seq(1,118))
DAS_nb2
summary(DAS_nb2)
plot(DASd, col="white", border="grey")
plot(DAS_nb2,coordinates(DASd),col="red",cex=0.3,add=TRUE)
plot(DAS_nb2,coordinates(DASd),col="red",cex=0.5,add=TRUE)
plot(DAS_nb2,coordinates(DASd),col="red",cex=0.7,add=TRUE)
plot(DAS_nb2,coordinates(DASd),col="red",cex=0.8,add=TRUE)
plot(DAS_nb2,coordinates(DASd),col="red",cex=0.9,add=TRUE)
text(coordinates(DASd), labels=DAS.d.df$Kabupaten_, cex=0.7, col="blue",pos=4, offset=0.4)

##BISHOP
plot(DASd, col="white", border="grey")
plot(diffnb(DAS_nb, DAS_nb2), coordinates(DASd), col="red", add=TRUE)
text(coordinates(DASd), labels=DAS.d.df$Kabupaten_, cex=0.7, col="blue",pos=4, offset=0.4)

### difference queen and Rook
plot(DASd, col="white", border="grey")
plot(DAS_nb, coordinates(DASd), col="dark grey",add=TRUE)
plot(DAS_nb2,coordinates(DASd),col="black",cex=0.9,add=TRUE)
plot(diffnb(DAS_nb, DAS_nb2), coordinates(DASd), col="red", add=TRUE)
text(coordinates(DASd), labels=DAS.d.df$Kabupaten_, cex=0.7, col="blue",pos=4, offset=0.4)


#### weight matrix
#QUEEN
DASw <- nb2listw(DAS_nb,zero.policy = TRUE)
summary(DASw,zero.policy=TRUE)
#ROOK
DASw2 <- nb2listw(DAS_nb2,zero.policy = TRUE)
summary(DASw2,zero.policy=TRUE)


### moran test
moran.test(Data2019$PDRB,DASw,randomisation = F,alternative = "two.sided")
moran.plot(Data2019$PDRB,DASw, col="blue", xlab="PDRB", ylab=" spatial lag")

moran.test(Data2019$PAD,DASw)
moran.plot(mydatap$`Kepadatan Penduduk per km^2`, DASw2, col="blue", xlab="Kepadatan Penduduk per km^2", ylab="spatial lag")

moran.test(Data2019$`Belanja Daerah`,DASw)
moran.plot(mydatap$`Tingkat Pengangguran`,DASw2, col="blue", xlab="Tingkat Pengangguran Terbuka", ylab="lag")

moran.test(mydatap$`Persentase Penduduk Miskin`,DASw2)
moran.plot(mydatap$`Persentase Penduduk Miskin`,DASw2, col="blue", xlab="Persentase Penduduk Miskin", ylab="lag")

moran.test(mydatap$IPM,DASw2)
moran.plot(mydatap$IPM,DASw2, col="blue", xlab="IPM", ylab="lag")

moran.test(mydatap$`Persentase Penduduk Pernah Menikah`,DASw2)
moran.plot(mydatap$`Persentase Penduduk Pernah Menikah`,DASw2, col="blue", xlab="Persentase Penduduk Pernah Menikah", ylab="lag")

moran.test(mod3$residuals,DASw)
lm.morantest(mod3, DASw, alternative="two.sided")
moran.plot(mod3$residuals,DASw, col="blue", xlab="Residual", ylab="lag")
lm.LMtests(mod3, nb2listw(DAS_nb, style="W"),
               test=c("LMerr", "LMlag","RLMerr","RLMlag","SARMA"))

x<-readShapeSpatial("C:/Users/SmartBook/Documents/Mata Kuliah/Skripsi/Peta/Jawa_m.shp")
Data.spdf<-SpatialPointsDataFrame(Data2019[,13:14],Data2019)
head(Data.spdf)
m.jarak<-gw.dist(dp.locat=coordinates(Data.spdf))
m.jarak
options(max.print=999999)

spplot(x, "y",col.regions=brewer.pal(9,"Blues"), main="PDRB", 
       scales = list(draw = TRUE), sp.layout=list(kab, titik), 
       xlab="Longitude", ylab="Latitude", cuts=8)

x$PDRB<-Data2019$PDRB
tm_shape(x, unit = "km") +
  tm_polygons(col = "PDRB", style = "pretty", palette = "Orange", 
              border.alpha = 0.5, title = "PDRB") +
  tm_scale_bar(size = 0.5, position = c("left", "top")) +
  tm_layout(frame = TRUE, legend.outside = TRUE)+
  tm_grid(lines = FALSE)+
  tm_xlab("Longitude", size = 1)+
  tm_ylab("Latitude", size = 1)

#Metode Pseudo-stepwise
#Untuk model GWR dengan fungsi Kernel Gaussian
DeVar<-"log(y)"
InDeVars<-c("x1", "x3", "x4","x5","x6","x8")
model.sel<-model.selection.gwr(DeVar, InDeVars,
                               data=Data.spdf, kernel="gaussian", adaptive=FALSE,
                               bw=1, approach="CV", dMat=m.jarak)
sorted.models<-
  model.sort.gwr(model.sel,numVars=length(InDeVars),
                 ruler.vector=model.sel[[2]][,2])
model.list<-sorted.models[[1]]
model.view.gwr(DeVar, InDeVars, model.list=model.list)
plot(sorted.models[[2]][,2],col="black", pch=20,
     lty=5, main = "Alternative view of GWR model selection
procedure", ylab = "CV", xlab = "Model number", type =
       "b")
#Untuk model GWR dengan fungsi Kernel Bisquare
DeVar<-"Y"
InDeVars<-c("X1", "X2", "X3", "X4")
model.sel<-model.selection.gwr(DeVar, InDeVars,
                               data=Data.spdf, kernel="bisquare", adaptive=FALSE,
                               bw=1, approach="CV", dMat=m.jarak)
sorted.models<-
  model.sort.gwr(model.sel,numVars=length(InDeVars),
                 ruler.vector=model.sel[[2]][,2])
model.list<-sorted.models[[1]]
model.view.gwr(DeVar, InDeVars, model.list=model.list)
plot(sorted.models[[2]][,2],col="black", pch=20,
     lty=5, main = "Alternative view of GWR model selection
procedure", ylab = "CV", xlab = "Model number", type =
       "b")

#Untuk model GWR dengan fungsi Kernel Tricube
DeVar<-"Y"
InDeVars<-c("X1", "X2", "X3", "X4")
model.sel<-model.selection.gwr(DeVar, InDeVars,
                               data=Data.spdf, kernel="tricube", adaptive=FALSE,
                               bw=1, approach="CV", dMat=m.jarak)
sorted.models<-
  model.sort.gwr(model.sel,numVars=length(InDeVars),
                 ruler.vector=model.sel[[2]][,2])
model.list<-sorted.models[[1]]
model.view.gwr(DeVar, InDeVars, model.list=model.list)
plot(sorted.models[[2]][,2],col="black", pch=20,
     lty=5, main = "Alternative view of GWR model selection
procedure", ylab = "CV", xlab = "Model number", type =
       "b")

#Menentuka bandwidth optimum
#Untuk model GWR dengan fungsi Kernel Gaussian
bw.mod.gwr.gauss<-bw.gwr(log(y)~x1+x3+x4+x5+x6+x8,
                         data=Data.spdf, approach="CV", kernel="gaussian",
                         adaptive=F)
bw.mod.gwr.gauss
#Untuk model GWR dengan fungsi Kernel Bisquare
bw.mod.gwr.bisq<-bw.gwr(log(y)~x1+x3+x4+x5+x6+x8,
                        data=Data.spdf, approach="CV", kernel="bisquare",
                        adaptive=F)
bw.mod.gwr.bisq
#Untuk model GWR dengan fungsi Kernel Tricube
bw.mod.gwr.tric<-bw.gwr(log(y)~x1+x3+x4+x5+x6+x8,
                        data=Data.spdf, approach="CV", kernel="tricube",
                        adaptive=F)
bw.mod.gwr.tric

#Melakukan estimasi parameter model GWR
#Untuk model GWR dengan fungsi Kernel Gaussian
gwr.gaus<-gwr.basic( log(y)~x1+x3+x4+x5+x6+x8,
                     data=Data.spdf, bw=bw.mod.gwr.gauss,
                     kernel="gaussian", adaptive=F)
print(gwr.gaus)

#Untuk model GWR dengan fungsi Kernel Bisquare
gwr.bisq<-gwr.basic( log(y)~x1+x3+x4+x5+x6+x8,
                     data=Data.spdf, bw=bw.mod.gwr.bisq, kernel="bisquare",
                     adaptive=F)
print(gwr.bisq)
summary(gwr.bisq)
#Untuk model GWR dengan fungsi Kernel Tricube
gwr.tric<-gwr.basic( log(y)~x1+x3+x4+x5+x6+x8,
                     data=Data.spdf, bw=bw.mod.gwr.tric,
                     kernel="tricube", adaptive=F)
print(gwr.tric)


#Melakukan uji signifikansi parameter GWR
gwr.t.adjust(gwr.gaus)[["results"]][["p"]]
gwr.t.adjust(gwr.gaus)[["results"]][["t"]]
View(gwr.t.adjust(gwr.gaus))
gwr.t.adjust(gwr.gaus)

data = gwr.t.adjust(gwr.gaus)[["results"]][["p"]]
write.xlsx(data, "C:/Users/SmartBook/Documents/Mata Kuliah/Skripsi/Data/data.xlsx")
thit=gwr.t.adjust(gwr.gaus)[["results"]][["t"]]
write.xlsx(thit, "C:/Users/SmartBook/Documents/Mata Kuliah/Skripsi/Data/thit.xlsx")
beta = gwr.gaus$SDF@data
gwr.gaus$SDF$residual
beta = subset(beta, select=c("Intercept", "x1","x3","x4","x5","x6","x8","residual"))
beta
write.xlsx(beta, "C:/Users/SmartBook/Documents/Mata Kuliah/Skripsi/Data/beta.xlsx")
library(xlsx)
str(gwr.gaus)

library(maptools)
library(RColorBrewer)
library(sp)
library(foreign)
library(lattice)
library(rgdal)
library(classInt)
library(class)
library(e1071)
library(shapefiles)
library(rgdal)
x<-readOGR("C:/Users/SmartBook/Documents/Mata Kuliah/Skripsi/Peta/Jawa_m.shp") 
plot(x, density=16, col="grey", axes=T, cex.axis=.75)
title(main="Pulau Jawa", sub="Dipetakan dengan R",font.sub=2)
title(xlab="Longitude",ylab='Latitude',cex.lab=.75,line=2.25)
text(coordinates(x), labels=x$KABUPATEN, cex=.5)

#layout
Data.spdf<-SpatialPointsDataFrame(data19[,9:10],data19)
kab <- list('sp.pointLabel',Data.spdf,label=x@data$Kabupaten, 
            cex=0.5, col='Black')
titik<-list('sp.points', Data.spdf, pch=19, cex=.8, col='Black')

#plot peubah signifikan
spplot(x, "Kelompok", col.regions=brewer.pal(9,"Pastel1"),main="Peta Sebaran Peubah Signifikan", 
       scales = list(draw = TRUE), sp.layout=list(kab, titik), 
       xlab="Longitude", ylab="Latitude", cuts=4)
spplot(x, "Kelompok", main="Peta Sebaran Peubah
Signifikan", scales = list(draw = TRUE),
       sp.layout=list(kab, titik), xlab="Longitude",
       ylab="Latitude", cuts=3, layout.scale.bar(height = 1))

#Plot variable x1
spplot(x, "x1",col.regions=brewer.pal(9,"Reds"), main="", 
       scales = list(draw = TRUE), sp.layout=list(kab, titik), cuts=8)
spplot(x, "x2",col.regions=brewer.pal(9,"Blues"), main="", 
       scales = list(draw = TRUE), sp.layout=list(kab,titik), cuts=8)
spplot(x, "x4",col.regions=brewer.pal(9,"Purples"), main="", 
       scales = list(draw = TRUE), sp.layout=list(kab,titik), cuts=8)
spplot(x, "x5",col.regions=brewer.pal(9,"BuGn"), main="", 
       scales = list(draw = TRUE), sp.layout=list(kab,titik), cuts=8)
spplot(x, "x6",col.regions=brewer.pal(9,"Oranges"), main="", 
       scales = list(draw = TRUE), sp.layout=list(kab,titik), cuts=8)
spplot(x, "residual",col.regions=brewer.pal(9,"RdYlBu"), main="", 
       scales = list(draw = TRUE), sp.layout=list(kab,titik), cuts=8)

#merge
x@data$row <- as.numeric(row.names(x@data))
x@data$ID <- as.numeric(row.names(x@data))

x@data$OBJECTID <- as.numeric(row.names(x@data))
temp <- merge(x@data, data19, by="OBJECTID", all.x=T, sort=F)
x@data <- temp[order(temp$OBJECTID),]
x@data$x1.x<-as.numeric(x@data$x1.x)
x@data$Kelompok<-as.numeric(x@data$Kelompok)
summary(x@data)
View(x@data)

merge.shp<-merge(x, data19, by="OBJECTID", all.x=TRUE)
final.plot<-merge.shp[order(merge.shp$order), ]

x$x1_p <- temp$x1_p
x$x1_p
tm_shape(x, unit="km") +
  tm_polygons(col = "x1_p", style = "pretty", palette = "-Reds", 
              border.alpha = 0.5, title = "") +
  tm_scale_bar(size=0.3 , position=c("left", "bottom")) +
  tm_layout(frame = FALSE, legend.outside = TRUE) + 
  tm_grid(lines=FALSE)+
  tm_compass(position=c(0.8, 0.5), color.light="grey90")
 
  + tm_text(text="Kabupaten_", size=0.1)
  tm_xlab("Longitude", size=1)+
  tm_ylab("Latitude", size=1)+ tm_compass(position=c(0.80, 0.80), color.light="grey90")

x$x2 <- Beta2019$x2
x$x2
tm_shape(x, unit="km") +
  tm_polygons(col = "x2", style = "pretty", palette = "Blues", 
                border.alpha = 0.5, title = "") +
  tm_scale_bar(size=0.3 , position=c("left", "bottom")) +
  tm_layout(frame = FALSE, legend.outside = FALSE) + 
  tm_grid(lines=FALSE)+
  tm_compass(position=c(0.01, 0.75), color.light="grey90")

x$x4_p <- temp$x4_p
x$x4_p
tm_shape(x, unit="km") +
  tm_polygons(col = "x4_p", style = "pretty", palette = "-Purples", 
              border.alpha = 0.5, title = "",n=10) +
  tm_scale_bar(size=0.3 , position=c("left", "bottom")) +
  tm_layout(frame = FALSE, legend.outside = TRUE) + 
  tm_grid(lines=FALSE)+
  tm_compass(position=c(0.8, 0.5), color.light="grey90")

x$x6_p <- temp$x6_p
x$x6_p
tm_shape(x, unit="km") +
  tm_polygons(col = "x6_p", style = "pretty", palette = "-BuGn", 
              border.alpha = 0.5, title = "") +
  tm_scale_bar(size=0.3 , position=c("left", "bottom")) +
  tm_layout(frame = FALSE, legend.outside = TRUE) + 
  tm_grid(lines=FALSE)+
  tm_compass(position=c(0.8, 0.5), color.light="grey90")

x$x8_p <- temp$x8_p
x$x8_p
tm_shape(x, unit="km") +
  tm_polygons(col = "x8_p", style = "pretty", palette = "-Oranges", 
              border.alpha = 0.5, title = "") +
  tm_scale_bar(size=0.3 , position=c("left", "bottom")) +
  tm_layout(frame = FALSE, legend.outside = TRUE) + 
  tm_grid(lines=FALSE)+
  tm_compass(position=c(0.8, 0.5), color.light="grey90")

x$residual <- Beta2019$residual
x$residual
tm_shape(x, unit="km") +
  tm_polygons(col = "residual", style = "pretty", palette = "RdYlBu", 
              border.alpha = 0.5, title = "") +
  tm_scale_bar(size=0.3 , position=c("left", "bottom")) +
  tm_layout(frame = FALSE, legend.outside = FALSE) + 
  tm_grid(lines=FALSE)+
  tm_compass(position=c(0.01, 0.75), color.light="grey90")

x$Kelompok <- temp$Kelompok
x$Kelompok
tm_shape(x, unit="km") +
  tm_polygons(col = "Kelompok", style = "cat", palette="Dark2",
              border.alpha = 0.5, title = "") +
  tm_scale_bar(size=0.3 , position=c("left", "bottom")) +
  tm_layout(frame = FALSE, legend.outside = TRUE) + 
  tm_grid(lines=FALSE)+
  tm_compass(position=c(0.8, 0.5), color.light="grey90")

head(Data.spdf)

#layout
Data.spdf<-SpatialPointsDataFrame(betavalue[,13:14],betavalue)
kab <- list('sp.pointLabel',Data.spdf,label=x@data$Kabupaten_, 
            cex=0.5, col='Black')
titik<-list('sp.points', Data.spdf, pch=19, cex=.8, col='Black')

#plot peubah signifikan
spplot(x, "Kelompok", col.regions=brewer.pal(9,"Pastel1"),main="Peta Sebaran Peubah Signifikan", 
       scales = list(draw = TRUE), sp.layout=list(kab, titik), 
       xlab="Longitude", ylab="Latitude", cuts=4)
spplot(x, "Kelompok", main="Peta Sebaran Peubah
Signifikan", scales = list(draw = TRUE),
       sp.layout=list(kab, titik), xlab="Longitude",
       ylab="Latitude", cuts=3, layout.scale.bar(height = 1))

library(tmap)
library(readxl)
Data<-read_excel("~/Mata Kuliah/Spasial/Tugas 3/Data.xlsx")
x$Angka_Kematian<-Data$Angka_Kematian
tm_shape(x, unit = "km") +
  tm_polygons(col = "Angka_Kematian", style = "pretty", palette = "Reds", 
              border.alpha = 0.5, title = "Angka Kematian") +
  tm_scale_bar(size = 0.5, position = c("left", "top")) +
  tm_layout(frame = TRUE, legend.outside = TRUE)+
  tm_grid(lines = FALSE)+
  tm_xlab("Longitude", size = 1)+
  tm_ylab("Latitude", size = 1)

tm_text(text = "KABUPATEN", size = 0.5)+
  tm_compass(position = c(0.80,0.80), color.light = "grey90")

#Plot variable x1
spplot(x, "X1",col.regions=brewer.pal(9,"Blues"), main="Sebaran Koefisien X1", 
       scales = list(draw = TRUE), sp.layout=list(kab, titik), 
       xlab="Longitude", ylab="Latitude", cuts=8)

x$Kasus_Aktif<-Data$Kasus_Aktif
tm_shape(x, unit = "km") +
  tm_polygons(col = "Kasus_Aktif", style = "pretty", palette = "PuRd", 
              border.alpha = 0.5, title = "Kasus Aktif") +
  tm_scale_bar(size = 0.5, position = c("left", "top")) +
  tm_layout(frame = TRUE, legend.outside = TRUE)+
  tm_grid(lines = FALSE)+
  tm_xlab("Longitude", size = 1)+
  tm_ylab("Latitude", size = 1)

tm_compass(position = c(0.80,0.80), color.light = "grey90")
tm_text(text = "KABUPATEN", size = 0.5)+
  
  #Plot variable x2
  spplot(x, "X2",col.regions=brewer.pal(9,"Purples"), main="Sebaran Koefisien X2", 
         scales = list(draw = TRUE), sp.layout=list(kab, titik), 
         xlab="Longitude", ylab="Latitude", cuts=8)
x$Rumah_Sakit<-Data$Rumah_Sakit
tm_shape(x, unit = "km") +
  tm_polygons(col = "Rumah_Sakit", style = "pretty", palette = "BuGn", 
              border.alpha = 0.5, title = "Rumah Sakit") +
  tm_scale_bar(size = 0.5, position = c("left", "top")) +
  tm_layout(frame = TRUE, legend.outside = TRUE)+
  tm_grid(lines = FALSE)+
  tm_xlab("Longitude", size = 1)+
  tm_ylab("Latitude", size = 1)

tm_compass(position = c(0.80,0.80), color.light = "grey90")
tm_text(text = "KABUPATEN", size = 0.5)+
  
  #Plot variable x3
  spplot(x, "X2",col.regions=brewer.pal(9,"Purples"), main="Sebaran Koefisien X2", 
         scales = list(draw = TRUE), sp.layout=list(kab, titik), 
         xlab="Longitude", ylab="Latitude", cuts=8)
x$Puskesmas<-Data$Puskesmas
tm_shape(x, unit = "km") +
  tm_polygons(col = "Puskesmas", style = "pretty", palette = "Purples", 
              border.alpha = 0.5, title = "Puskesmas") +
  tm_scale_bar(size = 0.5, position = c("left", "top")) +
  tm_layout(frame = TRUE, legend.outside = TRUE)+
  tm_grid(lines = FALSE)+
  tm_xlab("Longitude", size = 1)+
  tm_ylab("Latitude", size = 1)

tm_compass(position = c(0.80,0.80), color.light = "grey90")
tm_text(text = "KABUPATEN", size = 0.5)+
  
  #Plot variable x4
  spplot(x, "X2",col.regions=brewer.pal(9,"Purples"), main="Sebaran Koefisien X2", 
         scales = list(draw = TRUE), sp.layout=list(kab, titik), 
         xlab="Longitude", ylab="Latitude", cuts=8)
x$Kepadatan_Penduduk<-Data$Kepadatan_Penduduk
tm_shape(x, unit = "km") +
  tm_polygons(col = "Kepadatan_Penduduk", style = "pretty", palette = "Oranges", 
              border.alpha = 0.5, title = "Kepadatan Penduduk") +
  tm_scale_bar(size = 0.5, position = c("left", "top")) +
  tm_layout(frame = TRUE, legend.outside = TRUE)+
  tm_grid(lines = FALSE)+
  tm_xlab("Longitude", size = 1)+
  tm_ylab("Latitude", size = 1)
